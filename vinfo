#!/usr/bin/python

# vInfo - Devin Shoemaker 2019-03-03
# retrieves information about specific vhosts on cPanel servers
# https://github.com/tailwag/vinfo
# usage:
#       $ vinfo example.com
#       $ vinfo /home/user/public_html

import os 
import re
import sys 
import subprocess

def isset (varIn):
	return varIn in locals() or varIn in globals()
	
frmStr = "%-13s: %5s"

search = sys.argv[1]

# retrieve whole httpd.conf
conf = subprocess.Popen(["sudo", "cat", "/etc/apache2/conf/httpd.conf"], stdout=subprocess.PIPE).communicate()[0]

# convert httpd.conf into list by line
vhost = conf.split('\n')

# define regex for searching by domanin name 
if os.path.isdir(search):
    serverna = re.compile(r'\s{2}DocumentRoot\s'+search)
else:
    serverna = re.compile(r'\s{2}Server(Name|Alias).*?\s'+search+'.*?')

# return line searched for 
found = list(filter(serverna.match, vhost))[-1]

# get line number of returned line
check = [i for i, x in enumerate(vhost) if x == found][-1]

vbegin=check
vend=check

# matched opening and closing vhost tag 
vline = re.compile(r'</?VirtualHost.*?>')

while vbegin <= check:
    grep = vline.search(vhost[vbegin])
    if grep != None:
        break
    vbegin -= 1

while vend >= check:
    grep = vline.search(vhost[vend])
    if grep != None:
        break
    vend += 1

prog=vbegin

foundHost = []
while prog <= vend:
    foundHost.append(vhost[prog])
    prog += 1

def getAddr(hostIn, mode = 'display'):
	ipMatch  = re.compile(r'<VirtualHost [0-2]?[0-9]{1,2}(\.[0-2]?[0-9]{1,2}){3}:(80|443)>')
	ipAddr = list(filter(ipMatch.match, hostIn))[-1].split(' ')[-1].split(':')[0]
	if mode == 'display':
		print(frmStr % ('IP', ipAddr))
	elif mode == 'return':
		return ipAddr
	else:
		return 'Invalid Mode'
	print

def getUser(hostIn):
	usMatch  = re.compile(r'\s{4}PassengerUser.*')
	docRoot = list(filter(usMatch.match, hostIn))[-1].split(' ')[-1]
	print(frmStr % ('User', docRoot))
	print

def getRoot(hostIn):
	drMatch  = re.compile(r'\s{2}DocumentRoot.*')
	docRoot = list(filter(drMatch.match, hostIn))[-1].split(' ')[-1]
	print(frmStr % ('Doc Root', docRoot))
	print

def getDomains(hostIn):
	domMatch = re.compile(r'\s{2}Server(Name|Alias).*')
	domains = list(filter(domMatch.match, hostIn))
	
	domList  = domains[0].split(' ')[3:]

        if len(domains) > 1:
	    aliasDom = domains[1].split(' ')[3:]
	    domList.extend(aliasDom)

	desc = "Domains"
	for dom in domList:
		print(frmStr % (desc, dom))
		desc = ''
	print

def getCert(hostIn):
	certMatch = re.compile(r'\s{4}SSLCertificateFile.*')
	if len(filter(certMatch.match, hostIn)) > 0:
		certFile = list(filter(certMatch.match, hostIn))[-1].split(' ')[-1]
		print(frmStr % ('Certificate', certFile))
		ipAddy = getAddr(hostIn, 'return')
		sslFrm = "%-6s  %5s"
		runFile = 'sudo cat ' + certFile + ' | openssl x509 -text | grep -Eo "Not After\s:.+\\b" | cut -d: -f2-5 | tr \'\n\' \' \''
		fileCert = subprocess.Popen(runFile, stdout=subprocess.PIPE, shell=True).communicate()[0]
		sslExp = list()
		for port in [443, 465, 993, 995]: 
			portStr = str(port ) + ' '
			runPort = 'openssl s_client -showcerts -servername ' + certFile.split('/')[5] + ' -connect ' + ipAddy + ':' + portStr + ' < /dev/null 2>&1 | openssl x509 -text | grep -Eo "Not After\s:.+\\b" | cut -d: -f2-5 | tr \'\n\' \' \''
			sslExp.append(portStr + " : " + subprocess.Popen(runPort, stdout=subprocess.PIPE, shell=True).communicate()[0])
		print
		print(sslFrm % ('', 'File : ' + fileCert))
		for notAfter in sslExp:
			print(sslFrm % ('', notAfter))
	else:
		print("--SSL Not Enabled--")
	
	print

getAddr(foundHost)
getUser(foundHost)
getRoot(foundHost)
getDomains(foundHost)
getCert(foundHost)
