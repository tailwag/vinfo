#!/usr/bin/python

# vInfo - Devin Shoemaker     2019-03-03
#
# MAJOR: 1
# MINOR: 0
# PATCH: 2
# EXTRA: 0
#
# https://github.com/tailwag/vinfo
# `vinfo -h` for usage

import os 
import re
import sys 
import argparse
import subprocess

frmStr = "%-13s: %5s"

def isset (varIn):
    return varIn in locals() or varIn in globals()

def getMonth (monthIn):
    return{
            'Jan' : 1,
            'Feb' : 2,
            'Mar' : 3,
            'Apr' : 4,
            'May' : 5,
            'Jun' : 6,
            'Jul' : 7,
            'Aug' : 8,
            'Sep' : 9,
            'Oct' : 10,
            'Nov' : 11,
            'Dec' : 12
    }[monthIn]

def addNulls (intIn):
    if intIn < 10:
        return '0' + str(intIn)
    else:
        return intIn
	
def getHost (searchString, mode = 'starray', fileLoc = False): 
    # retrieve whole httpd.conf
    if fileLoc:
        getConf = 'sudo cat ' + fileLoc
    else:
        if os.path.isdir('/etc/apache2/conf'):
            getConf = 'sudo cat /etc/apache2/conf/httpd.conf'
        else:
            getConf = 'sudo cat /etc/httpd/conf/httpd.conf'
    
    conf = subprocess.Popen(getConf, stdout=subprocess.PIPE, shell=True).communicate()[0]
    
    # convert httpd.conf into list by line
    vhost = conf.split('\n')
   
    # define all domain specific regexes for locating vhost
    docSearch = re.compile(r'\s*?DocumentRoot\s' + searchString)
    domSearch = re.compile(r'\s*?Server(Name|Alias).*?\s' + searchString + '(\s.*|$)')
    usrSearch = re.compile(r'\s*?AssignUserID\s' + searchString + '\s' + searchString)
    
    # define all non specific regexes for determining line position
    ovhMatch = re.compile(r'<VirtualHost [1-2]?[0-9]{1,2}(\.[1-2]?[0-9]{1,2}){3}:(80|443)>')
    cvhMatch = re.compile(r'</VirtualHost>')
    docMatch = re.compile(r'\s*?DocumentRoot\s.*')
    namMatch = re.compile(r'\s*?ServerName\s.*')

    
    # return line searched for 
    # if document root supplied as search string 
    if filter(docSearch.match, vhost):
        found = list(filter(docSearch.match, vhost))

    # if domain supplied as search string
    elif filter(domSearch.match, vhost):
        found = list(filter(domSearch.match, vhost))

    # if user supplied as search string
    elif filter(usrSearch.match, vhost):
        found = list(filter(usrSearch.match, vhost))
        # if user is used and more than one vhost found, spawn selection menu
        if len(found) > 1:
           global menu 
           menu = True

    # if no vhost found, return error
    else:
        print('\033[1;31mFatal Error:\033[0m')
        sys.exit("     no vhost found for " + searchString + "\n")
    
    #continue if 1 or more vhosts were found matching search string
    if len(found) != 0:
        # foundHost to be used later. list of selected host split by \n
        foundHost = []

        # hostList to be used later. menu of which hosts to select if user used.
        hostList  = []

        # determine line(s) on which searchstring was found
        foundOn = [i for i, x in enumerate(vhost) if x.lstrip() == found[-1].lstrip()]

        # determines the print formatting of the menu
        # updated later depending on how log the ips and domains are 
        lenPri = 1
        lenIpa = 1

        # locates the neccesary information from the vhosts in which the search string was found
        for line in foundOn:
            # empty beginning and end at start of each pass
            beg = False
            end = False

            # decriment one line until beginning found
            while not beg:
                # if <VirtualHost x.x.x.x:xx> tag found 
                if ovhMatch.match(vhost[line]):
                    # strips raw tag down to x.x.x.x:xx, then splits into list ['x.x.x.x', 'xx']
                    preForm = vhost[line].split(' ')[-1].replace(">", "").split(":")

                    # vAddr = 'x.x.x.x', vPort = 'xx'
                    vAddr, vPort = preForm

                    # define length of logest IP address in menu for formatting
                    if len(vAddr) > lenIpa:
                        lenIpa = len(vAddr)

                    # determine starting line number of vhost
                    beg = str(line)

                else:
                    line -= 1
            # increment one line until end found 
            while not end:
                # if </VirtualHost> found 
                if cvhMatch.match(vhost[line]):
                    # determine ending line number
                    end = str(line)

                else:
                    # if DocumentRoot found
                    if docMatch.match(vhost[line]):
                        # set docroot for menu
                        docRoot = vhost[line].split(' ')[-1]
                    
                    # if ServerName found
                    elif namMatch.match(vhost[line]):
                        # set domain for menu
                        priDom = vhost[line].split(' ')[-1]

                        # define length of longest domain in menu for formatting
                        if len(priDom) > lenPri:
                            lenPri = len(priDom)
                    line += 1

            # add each vhost's information to list used to generate menu
            hostList.append([beg, end, vAddr, vPort, priDom, docRoot])

        # define menu's formatting using the values generated above 
        frmPause = '%-3s- %-' + str(lenPri + 3) + 's- %-' + str(lenIpa + 1) + 's- %-4s- %-2s'

        # dont display menu if 2 or less results displayed when docroot/domain searched for
        if len(hostList) <= 2 and not isset('menu') and mode != 'list':
            hostSelection = len(hostList)

        # display menu to prompt for vhost selection if user searched for 
        # if improper input provided, it loops and displays again 
        while not 'hostSelection' in locals():
            hostId = 1
            hostDesc = ''
            print

            # separates each individual host's attributes from list of all hosts
            for host in hostList:
                # display description of each host, see `hostList.append()`
                print(frmPause % (hostId, '"' + host[4] + '"', host[2], host[3], host[5]))
                hostId += 1
            
            if mode == 'list':
                sys.exit()

            # try used so if non integer is provided, no error is shown, it just loops
            try:
                print
                selHost = int(raw_input(" [vhost to use]: "))
                print

                # if value is an integer and is a valid selection, complete loop
                if selHost <= len(hostList) and selHost > 0:
                    hostSelection = selHost
            except:
                print
        
        # determine starting and ending lines for selected vhost 
        startLine  = int(hostList[hostSelection - 1][0])
        finishLine = int(hostList[hostSelection - 1][1])

        # create list of only selected vhost
        foundHost.extend(vhost[startLine:finishLine + 1])

    if mode == 'display':
        # set start line, +1 to match actual line number on system
        lineNo = startLine + 1

        # print each line of selected vhost with line number from httpd.conf
        for line in foundHost:
            print('\033[1;37m' + str(lineNo) + '\033[0m' + " \033[1;31m|\033[0m " + line)
            lineNo += 1

    elif mode == 'return':
        # return only lines from vhost
        return "\n".join(foundHost)

    elif mode == 'array':
        # return only lines from vhost in list form
        return foundHost

    elif mode == 'starray':
        stArray = []
        # return only lined from vhost with leading whitespace stripped 
        for spLine in foundHost:
            stArray.append(spLine.lstrip())
        return stArray

def getAddr(hostIn, mode = 'display'):
    ipMatch  = re.compile(r'<VirtualHost [0-2]?[0-9]{1,2}(\.[0-2]?[0-9]{1,2}){3}:(80|443)>')
    ipAddr = list(filter(ipMatch.match, hostIn))[-1].split(' ')[-1].split(':')[0]
    if mode == 'display':
        print(frmStr % ('IP', ipAddr))
        print
    elif mode == 'return':
    	return ipAddr

def getUser(hostIn, mode = 'display'):
    usMatch  = re.compile(r'\s*?AssignUserID.*')
    usrName = list(filter(usMatch.match, hostIn))[-1].split(' ')[-1]
    if mode == 'display':
        print(frmStr % ('User', usrName))
        print
    elif mode == 'return':
        return usrName

def getRoot(hostIn, mode = 'display'):
    drMatch  = re.compile(r'\s*?DocumentRoot.*')
    docRoot = list(filter(drMatch.match, hostIn))[-1].split(' ')[-1]
    if mode == 'display':   
        print(frmStr % ('Doc Root', docRoot))
        print
    elif mode == 'return':
        return docRoot

def getDoms(hostIn, domtype = 'all', mode = 'display'):
    domtype = domtype.replace("primary", "pri").replace("secondary", "sec")
    priMatch = re.compile(r'ServerName.*')
    secMatch = re.compile(r'ServerAlias.*')
    
    priDom = filter(priMatch.match, hostIn)[0].split(' ')[1:]
    secDom = []
    for alias in filter(secMatch.match, hostIn):
        secDom.extend(alias.split(' ')[1:])

    allDom = []
    allDom.extend(priDom)
    allDom.extend(secDom)
    
    if mode == 'display':
        pre = '    Aliases'
        if domtype == 'pri':
            print(frmStr % ('Main Domain', priDom[0]))
        elif domtype == 'sec':
            for srvAl in secDom:
                print(frmStr % (pre, srvAl))
                pre = ""
        elif domtype == 'all':
            print(frmStr % ('Main Domain', priDom[0]))
            for srvAl in secDom:
                print(frmStr % (pre, srvAl))
                pre = ""

        print
    elif mode == 'return':
        if domtype == 'pri':
            return priDom[0]
        elif domtype == 'sec':
            return "\n".join(secDom)
        elif domtype == 'all':
            return "\n".join(allDom)

def getFile(hostIn, service = 'all', mode = 'display'):
    # find the ssl specification within vhost 
    certMatch = re.compile(r'\s*?SSLCertificateFile.*')
    apacheArr = filter(certMatch.match, hostIn)

    # if ssl line found continue
    if len(apacheArr) > 0:
        # actual cert file 
        certFile = list(apacheArr)[-1].split(' ')[-1]

        # select ServerName ans first ServerAlias from vhost
        # dovecot sni.conf always seems to use one or the other
        priSerDom = getDoms(hostIn, domtype = 'pri', mode = 'return')
        secSerDom = getDoms(hostIn, domtype = 'sec', mode = 'return').split('\n')[0]

        # import all of dovecot sni conf into a list
        sniConfCom = 'sudo cat /etc/dovecot/sni.conf'
        sniConf = subprocess.Popen(sniConfCom, stdout=subprocess.PIPE, shell=True).communicate()[0].split('\n')

        sniPriRegex = re.compile(r'local_name\s.*("|\s)' + priSerDom + '("|\s)')
        sniSecRegex = re.compile(r'local_name\s.*("|\s)' + secSerDom + '("|\s)')

        priFound = filter(sniPriRegex.search, sniConf)
        # if ServerName -not- found in sni conf
        if len(priFound) == 0:
            secFound = filter(sniSecRegex.search, sniConf)
            # if ServerAlias found
            if len(secFound) != 0:
                # retrieve ssl_cert from sni conf (1 line after local_name
                startNum = [i for i, x in enumerate(sniConf) if x == secFound[0]][0]
                mailCert = sniConf[(startNum + 1)].split('<')[-1]
        else:
            # if ServerName found
            # retrieve ssl_cert from sni conf (1 line after local_name
            startNum = [i for i, x in enumerate(sniConf) if x == priFound[0]][0]
            mailCert = sniConf[(startNum + 1)].split('<')[-1]

        if mode == 'display':
            if service == 'web' or service == 'all':
                print(frmStr % ('Apache Cert', certFile))

            if service == 'mail' or service == 'all':
                if 'mailCert' in locals():
                    print(frmStr % ('  Mail Cert', mailCert))
                else:
                    print(frmStr % ('  Mail Cert', ' -- Not Found --'))
            print

        if mode == 'return':
            if service == 'web':
                return certFile
            elif service == 'mail':
                if 'mailCert' in locals():
                    return mailCert
            elif service == 'all':
                if 'mailCert' in locals():
                    return certFile + ' ' + mailCert
                else:
                    return certFile
    else:
        if mode == 'display':
            sslWarn = True
            print("--SSL Not Enabled--")
            print

def getCert(hostIn, ports = ['apache', 'mail', '443', '465', '993', '995']):
    certMatch = re.compile(r'\s*?SSLCertificateFile.*')
    if len(filter(certMatch.match, hostIn)) > 0:
        httpCert = getFile(hostIn, 'web', 'return')
        mailCert = getFile(hostIn, 'mail', 'return')

        # uses previously defined ip function to return site's IP 
        # used in openssl "connect" statement
        ipAddy = getAddr(hostIn, 'return')
        sslFrm = "%-4s  %5s"

        # selects domain for openssl tests
        # if docroot is used, grabs domain from cert file path 
        # specified domain used if domain used 
        if os.path.isdir(search) or isset('menu'):
            snDom = getDoms(virtualHost, 'pri', 'return')
        else:
            snDom = search

        # compiles list of SSL expiration dates on all applicable ports 
        # "Valid" if domain specified is included in "DNS" names from openssl
	sslExp = list()
	for port in ports: 
            # grabs entirety of openssl x509 output for each port
            if port == 'apache':
		portStr = port.capitalize()
                xRun = 'sudo cat ' + httpCert + ' | openssl x509 -text | sed "s:^[ \\t]*::"'
            elif port == 'mail':
                if mailCert:
		    portStr = '  ' + port.capitalize()
                    xRun = 'sudo cat ' + mailCert + ' | openssl x509 -text | sed "s:^[ \\t]*::"'
                else:
                    portStr = False
            else:
		portStr = str(port) + ' '
                xRun = 'openssl s_client -showcerts -servername ' + snDom + ' -connect ' + ipAddy + ':' + portStr + ' < /dev/null 2>&1 | openssl x509 -text | sed "s:^[ \\t]*::"'
                portStr = '   ' + str(port)
            if portStr:
                xArray = subprocess.Popen(xRun, stdout=subprocess.PIPE, shell=True).communicate()[0].split('\n')
                comRegex = re.compile(r'Subject\s?:?.*CN\s?=\s?[a-z0-9\.\-]+')
                naRegex  = re.compile(r'Not After.*')
                dnsRegex = re.compile(r'DNS:.*')

                # retrieves "Not After" (expiration) from openssl x509 
                notAfter = ':'.join(list(filter(naRegex.match, xArray))[-1].split(':')[1:])
                dateArr  = notAfter.split(' ')

                # concatenate date from openssl while converting 3 letter date code to 2 digit int
                # certdate = YearMonthDayHourMinuteSecond (YYYYmmddHHMMSS) in GMT (openssl default)
                if dateArr[2] == '':
                    certDate = dateArr[5] + addNulls(getMonth(dateArr[1])) + str(addNulls(dateArr[3])) + dateArr[4].replace(":", "")
                else:
                    certDate = dateArr[4] + str(addNulls(getMonth(dateArr[1]))) + str(dateArr[2]) + dateArr[3].replace(":", "")

                # retrieves current datetime from system in GMT
                # system used for portability, as pytz is not usually installed by default
                dateCom = 'TZ=GMT date "+%Y%m%d%H%M%S"'
                curDate = subprocess.Popen(dateCom, stdout=subprocess.PIPE, shell=True).communicate()[0]

                dnsHostArr = []
                # creates list of all SANs from openssl x509 
	        # if no SANs found, CN is used
                if len(filter(dnsRegex.match, xArray)) == 0:
	            dnsHostArr.append(re.search(comRegex, filter(comRegex.match, xArray)[-1]).group(0).split("=")[-1])
	        else:
                    dnsHostArr = list(filter(dnsRegex.match, xArray))[-1].replace("DNS:", "").replace(",", "").split(' ')
	            
                # Invalid is default state, changed to valid if domain name is listed on the cert
                #      --then--
                # if current datetime is past datetime from cert, status set to Expired
                isValid = '\033[1;33mInvalid\033[0m'
                for val in dnsHostArr:
                    if val == snDom:
                        isValid = '  \033[1;32mValid\033[0m'

                if curDate > certDate:
                    isValid = '\033[1;31mExpired\033[0m'
                            
	        sslExp.append(portStr + " : " + isValid + " -" + notAfter)
	for portCheck in sslExp:
	    print(sslFrm % ('', portCheck))
        print
    else:
        if not isset("sslWarn"):
	    print("--SSL Not Enabled--")
            print

parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter,
                                    prefix_chars='-',
                                    usage="vinfo [--help] [-a] [-c [-S <web|mail>]] [-d [-D <pri|sec>]] [-g] [-l] \n             " +
                                            "[-r] [-s [-P <ports>]] [-u] [--clean] (domain|docroot|user)",
                                    description="vInfo\n" + 
                                                "       Retrieves information about specific vhosts on cpanel servers.\n" +
                                                "       Devin Shoemaker - 2019\n",
                                    epilog=" ")
            
parser.add_argument("-a", "--address", help="retrieve ip address of site / docroot's associated sites\n", action="store_true")
parser.add_argument("-c", "--cert", help="retrieve the location of the SSL cert file used by apache", action="store_true")
parser.add_argument("-S", help="used with -c to specify which services certs should be selected for\n" +
                                "-options are 'web' or 'mail'\n\n", dest="srvc")
parser.add_argument("-d", "--domain", help="retrieve list of domains for given docroot", action="store_true")
parser.add_argument("-f", "--file", help="specify the httpd.conf to use", dest="conf")
parser.add_argument("-D", help="used with -d to specify which domains select between servername or serveralias\n" + 
                               "-options: primary, secondary\n\n", dest="type")
parser.add_argument("-g", "--get-host", help="retrieves entire vhost\n", action="store_true")
parser.add_argument("-l", "--list", help="lists all vhosts associated with a user\n", action="store_true")
parser.add_argument("-r", "--root", help="retrieve the docroot for a given domain\n", action="store_true")
parser.add_argument("-s", "--ssl-test", help="retrieve SSL information for a given domain / docroot", action="store_true")
parser.add_argument("-P", help="used with -s to specify service(s) to run checks. supports comma separated input.\n" +
                                "-options are apache,mail,http,smtp,imap,pop3\n\n", dest="port")
parser.add_argument("-u", "--user", help="retrieve the user which owns the site / docroot\n", action="store_true")
parser.add_argument("--clean", help="return clean output (no formatting)\n", action="store_true")
parser.add_argument('search', help="domain, docroot, or user")

args, unknown = parser.parse_known_args()

##### start error handling #####
errors = []

# handle unknown arguments, which are stored in list(unknown) if present
if unknown:
    if len(unknown) == 1:
        errors.append("     " + ', '.join(unknown) + " not a valid argument\n")
    else:
        errors.append("     " + ', '.join(unknown) + " are not valid arguments\n")

# in case of `vinfo -S domain.com`
if args.srvc and not args.cert:
    errors.append("     -S cannot be used without -c\n")

# handle unknown options for -S
if args.srvc and args.srvc not in ['web', 'mail', 'all']:
    errors.append("     '" + args.srvc + "' is not a valid option for -S")
    errors.append("     accepted options are:")
    errors.append("          web")
    errors.append("          mail\n")

# in case of `vinfo -D domain.com`
if args.type and not args.domain:
    errors.append("     -D cannot be used without -d\n")

# handle unknown options for -D
if args.type and args.type not in ['primary', 'pri', 'secondary', 'sec', 'all']:
    errors.append("     Supported options for -D are:")
    errors.append("            primary / pri")
    errors.append("          secondary / sec\n")

# in case of `vinfo -P doamain.com`
if args.port and not args.ssl_test:
    errors.append("     -P cannot be used without -s\n")

if args.port:
    # ensure proper values are provided for getCert()
    portStr = args.port.replace("http", "443").replace("smtp", "465").replace("imap", "993").replace("pop3", "995")

    # convert to list for passage to getCert()
    srvcArr = portStr.split(",")
    allowedPorts = ['apache', 'mail', '443', '465', '993', '995', 'all']
    die = []

    # ensure no unknown values are provided
    for srvc in srvcArr:
        if srvc not in allowedPorts:
            die.append(srvc)

    if (len(die) == 1):
        errors.append("     '" + die[0] + "' is not a valid port or service\n")
    elif (len(die) >= 1):
        errors.append("     '" + ', '.join(die) + "' are not valid ports or services\n")

    if len(die) != 0:
        errors.append("     accepted values are:")
        errors.append("          apache")
        errors.append("          mail")
        errors.append("          http / 443")
        errors.append("          smtp / 465")
        errors.append("          imap / 993")
        errors.append("          pop3 / 995\n")

# if any errors detected, print them before exiting
if errors:
    print("\033[1;31mFatal Error:\033[0m")
    sys.exit("\n".join(errors))

#####   end error handling #####


# domain / docroot 
search = args.search

# handle --clean
if args.clean:
    output = 'return'
else:
    output = 'display'

# `vinfo -l (domain|docroot|user)`
# lists all vhosts associated with a user
if args.list:
    errOut = []
    for check in args.__dict__:
        if check != 'search' and check != 'clean' and check != 'list' and args.__dict__[check]:
            errOut.append(args.__dict__[check])
    if len(errOut) != 0:
        print('\033[1;31mFatal Error:\033[0m')
        sys.exit('     no other arguments accepted with -l')
    getHost(search, 'list')

# `vinfo -g (domain|docroot|user)`
# formatted includes line numbers from httpd.conf 
if args.get_host:
    errOut = []
    for check in args.__dict__:
        if check != 'search' and check != 'clean' and check != 'get_host' and args.__dict__[check]:
            errOut.append(args.__dict__[check])
    if len(errOut) != 0:
        print('\033[1;31mFatal Error:\033[0m')
        sys.exit('     only --clean my be used with -g')

    if args.clean:
        if args.conf:
            print getHost(search, output, args.conf)
        else:
            print getHost(search, output)
    else:
        if args.conf:
            getHost(search, output, args.conf)
        else:
            getHost(search, output)
    sys.exit()
else:
    if args.conf:
        virtualHost = getHost(search, 'starray', args.conf)
    else:
        virtualHost = getHost(search)

# `vinfo -a (domain|docroot|user)`
# retrieves ip address from vhost
# affected by --clean
if args.address:
    if args.clean:
        print getAddr(virtualHost, output)
    else:
        getAddr(virtualHost)

# `vinfo -u (domain|docroot|user)`
# retrieves user owning the docroot from vhost, not filepath 
# affected by --clean 
if args.user:
    if args.clean:
        print getUser(virtualHost, output)
    else:
        getUser(virtualHost)

# `vinfo -r (domain|docroot|user)`
# retrieves docroot from vhost
# affected by --clean
if args.root:
    if args.clean:
        print getRoot(virtualHost, output)
    else:
        getRoot(virtualHost)

# `vinfo -d [-D (pri|sec)] (domain|docroot|user)`
# retrieves servername and serveralias domains, defaults to both
# affected by --clean
if args.domain:
    if args.clean:
        if args.type:
            print getDoms(virtualHost, args.type, output)
        else:
            print getDoms(virtualHost, 'all', output)
    else:
        if args.type:
            getDoms(virtualHost, args.type)
        else:
            getDoms(virtualHost)

# `vinfo -c [-S (web|mail)] (domain|docroot|user)`
# retrieves location of certs used to secure either mail or apache, defaults to both 
# affected by --clean 
if args.cert:
    if args.clean:
        if args.srvc:
            print getFile(virtualHost, args.srvc, output)
        else:
            print getFile(virtualHost, 'all', output)
    else:
        if args.srvc:
            getFile(virtualHost, args.srvc, output)
        else:
            getFile(virtualHost)

# `vinfo -s [-P apache,mail,http,smtp,imap,pop3] (domain|docroot|user)`
# tests all ssl certs, returns (valid|invalid|expired) - [expiration date] for each (file|service) tested
# defaults to test all. specified domain used for test if vinfo was run with domain. 
# if docroot was used, primary domain from vhost will be used 
#       valid - returned if cert is not expired -and- domain used for test was 
#               listed either as a common name or subject alternative name 
#     invalid - returned if cert id not expired, but domain was not listed on cert
#     expired - self explanatory 
if args.ssl_test:
    if args.port:
        if args.port == 'all':
            getCert(virtualHost)
        else:
            getCert(virtualHost, srvcArr)
    else:
        getCert(virtualHost)
        
# if no options specified, run default 
# equivalent of:
#       `vinfo -aurdcs -D all -P all -S all (domain|docroot|user)`
# not affected by --clean
default = True
for check in args.__dict__:
    if check != 'search' and check != 'clean' and args.__dict__[check]:
        default = False

if default:
    getAddr(virtualHost)
    getUser(virtualHost)
    getRoot(virtualHost)
    getDoms(virtualHost)
    getFile(virtualHost)
    getCert(virtualHost)
