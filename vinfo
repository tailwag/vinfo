#!/usr/bin/python

# vInfo - Devin Shoemaker 2019-03-03
# retrieves information about specific vhosts on cPanel servers
# https://github.com/tailwag/vinfo
# usage:
#       $ vinfo example.com
#       $ vinfo /home/user/public_html

import os 
import re
import sys 
import subprocess

def isset (varIn):
    return varIn in locals() or varIn in globals()

def getMonth (monthIn):
    return{
            'Jan' : 1,
            'Feb' : 2,
            'Mar' : 3,
            'Apr' : 4,
            'May' : 5,
            'Jun' : 6,
            'Jul' : 7,
            'Aug' : 8,
            'Sep' : 9,
            'Oct' : 10,
            'Nov' : 11,
            'Dec' : 12
    }[monthIn]

def addNulls (intIn):
    if intIn < 10:
        return 0 + intIn
    else:
        return intIn
	
frmStr = "%-13s: %5s"

search = sys.argv[1]

# retrieve whole httpd.conf
if os.path.isdir('/etc/apache2/conf'):
    getConf = 'sudo cat /etc/apache2/conf/httpd.conf'
else:
    getConf = 'sudo cat /etc/httpd/conf/httpd.conf'

conf = subprocess.Popen(getConf, stdout=subprocess.PIPE, shell=True).communicate()[0]

# convert httpd.conf into list by line
vhost = conf.split('\n')

# define regex for searching by domanin name 
if os.path.isdir(search):
    serverna = re.compile(r'\s{2}DocumentRoot\s'+search)
else:
    serverna = re.compile(r'\s{2}Server(Name|Alias).*?\s'+search+'.*?')

# return line searched for 
found = list(filter(serverna.match, vhost))[-1]

# get line number of returned line
check = [i for i, x in enumerate(vhost) if x == found][-1]

vbegin = check
vend = check

# matched opening and closing vhost tag 
vline = re.compile(r'</?VirtualHost.*?>')

# determine beginning of desired vhost
while vbegin <= check:
    grep = vline.search(vhost[vbegin])
    if grep != None:
        break
    vbegin -= 1

# determine end of desired vhost
while vend >= check:
    grep = vline.search(vhost[vend])
    if grep != None:
        break
    vend += 1

prog = vbegin

# add each line of desired vhost to a list
foundHost = []
while prog <= vend:
    foundHost.append(vhost[prog])
    prog += 1

def getAddr(hostIn, mode = 'display'):
    ipMatch  = re.compile(r'<VirtualHost [0-2]?[0-9]{1,2}(\.[0-2]?[0-9]{1,2}){3}:(80|443)>')
    ipAddr = list(filter(ipMatch.match, hostIn))[-1].split(' ')[-1].split(':')[0]
    if mode == 'display':
        print(frmStr % ('IP', ipAddr))

    elif mode == 'return':
    	return ipAddr

    else:
    	return 'Invalid Mode'

    print

def getUser(hostIn):
    usMatch  = re.compile(r'\s{4}PassengerUser.*')
    docRoot = list(filter(usMatch.match, hostIn))[-1].split(' ')[-1]
    print(frmStr % ('User', docRoot))
    print

def getRoot(hostIn):
    drMatch  = re.compile(r'\s{2}DocumentRoot.*')
    docRoot = list(filter(drMatch.match, hostIn))[-1].split(' ')[-1]
    print(frmStr % ('Doc Root', docRoot))
    print

def getDomains(hostIn):
    domMatch = re.compile(r'\s{2}Server(Name|Alias).*')
    domains = list(filter(domMatch.match, hostIn))
    
    domList  = domains[0].split(' ')[3:]
    
    if len(domains) > 1:
        aliasDom = domains[1].split(' ')[3:]
        domList.extend(aliasDom)
    
    desc = "Domains"
    for dom in domList:
    	print(frmStr % (desc, dom))
    	desc = ''

    print

def getCert(hostIn):
    certMatch = re.compile(r'\s{4}SSLCertificateFile.*')
    if len(filter(certMatch.match, hostIn)) > 0:
        certFile = list(filter(certMatch.match, hostIn))[-1].split(' ')[-1]
        print(frmStr % ('Certificate', certFile))

        # uses previously defined ip function to return site's IP 
        # used in openssl "connect" statement
        ipAddy = getAddr(hostIn, 'return')
        sslFrm = "%-6s  %5s"

        # selects domain for openssl tests
        # if docroot is used, grabs domain from cert file path 
        # specified domain used if domain used 
        if os.path.isdir(search):
            snDom = certFile.split('/')[5]
        else:
            snDom = search

        # compiles list of SSL expiration dates on all applicable ports 
        # "Valid" if domain specified is included in "DNS" names from openssl
	sslExp = list()
	for port in ['File', 443, 465, 993, 995]: 
            # grabs entirety of openssl x509 output for each port
            
            if port == 'File':
		portStr = port
                xRun = 'sudo cat ' + certFile + ' | openssl x509 -text | sed "s:^[ \\t]*::"'
            else:
		portStr = str(port) + ' ' 
                xRun = 'openssl s_client -showcerts -servername ' + snDom + ' -connect ' + ipAddy + ':' + portStr + ' < /dev/null 2>&1 | openssl x509 -text | sed "s:^[ \\t]*::"'

            xArray = subprocess.Popen(xRun, stdout=subprocess.PIPE, shell=True).communicate()[0].split('\n')

            dnsRegex = re.compile(r'DNS:.*')
            comRegex = re.compile(r'Subject:?\sCN\s?=\s?[a-z0-9\.\-]+')
            naRegex = re.compile(r'Not After.*')

            # retrieves "Not After" (expiration) from openssl x509 
            notAfter = ':'.join(list(filter(naRegex.match, xArray))[-1].split(':')[1:])
            dateArr = notAfter.split(' ')

            # concatenate date from openssl while converting 3 letter date code to 2 digit int
            # certdate = YearMonthDayHourMinuteSecond (YYYYmmddHHMMSS) in GMT (openssl default)
            if dateArr[2] == '':
                certDate = dateArr[5] + str(addNulls(getMonth(dateArr[1]))) + str(addNulls(dateArr[3])) + dateArr[4].replace(":", "")
            else:
                certDate = dateArr[4] + str(addNulls(getMonth(dateArr[1]))) + str(dateArr[2]) + dateArr[4].replace(":", "")

            # retrieves current datetime from system in GMT
            # system used for portability, servers don't have pytz installed by default
            dateCom = 'TZ=GMT date "+%Y%m%d%H%M%S"'
            curDate = subprocess.Popen(dateCom, stdout=subprocess.PIPE, shell=True).communicate()[0]

            # creates list of all SANs from openssl x509 
	    # if no SANs found, CN is used
            if len(filter(dnsRegex.match, xArray)) == 0:
		dnsHostArr[0] = re.search(comRegex, filter(comRegex.match, xArray)[-1]).group(0).split("=")[-1]
	    else:
            	dnsHostArr = list(filter(dnsRegex.match, xArray))[-1].replace("DNS:", "").replace(",", "").split(' ')
		
            # Invalid is default state, changed to valid if domain name is listed on the cert
            #      --then--
            # if current datetime is past datetime from cert, status set to Expired
            isValid = 'Invalid'
            for val in dnsHostArr:
                if val == snDom:
                    isValid = '  Valid' 

            if curDate > certDate:
                isValid = 'Expired'
                        
	    sslExp.append(portStr + " : " + isValid + " -" + notAfter)
	print
	for portCheck in sslExp:
	    print(sslFrm % ('', portCheck))

    else:
	print("--SSL Not Enabled--")

    print

getAddr(foundHost)
getUser(foundHost)
getRoot(foundHost)
getDomains(foundHost)
getCert(foundHost)

