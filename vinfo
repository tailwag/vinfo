#!/usr/bin/python

# vInfo - Devin Shoemaker 2019-03-03
# retrieves information about specific vhosts on cPanel servers
# https://github.com/tailwag/vinfo
#
# `vinfo -h` for usage

import os 
import re
import sys 
import argparse
import subprocess

frmStr = "%-13s: %5s"

def isset (varIn):
    return varIn in locals() or varIn in globals()

def getMonth (monthIn):
    return{
            'Jan' : 1,
            'Feb' : 2,
            'Mar' : 3,
            'Apr' : 4,
            'May' : 5,
            'Jun' : 6,
            'Jul' : 7,
            'Aug' : 8,
            'Sep' : 9,
            'Oct' : 10,
            'Nov' : 11,
            'Dec' : 12
    }[monthIn]

def addNulls (intIn):
    if intIn < 10:
        return 0 + intIn
    else:
        return intIn
	
def getHost (searchString, mode = 'array'):
    
    # retrieve whole httpd.conf
    if os.path.isdir('/etc/apache2/conf'):
        getConf = 'sudo cat /etc/apache2/conf/httpd.conf'
    else:
        getConf = 'sudo cat /etc/httpd/conf/httpd.conf'
    
    conf = subprocess.Popen(getConf, stdout=subprocess.PIPE, shell=True).communicate()[0]
    
    # convert httpd.conf into list by line
    vhost = conf.split('\n')
    
    # define regex for searching by domanin name 
    if os.path.isdir(searchString):
        serverna = re.compile(r'\s{2}DocumentRoot\s' + searchString)
    else:
        serverna = re.compile(r'\s{2}Server(Name|Alias).*?\s' + searchString + '.*?')
    
    # return line searched for 
    found = list(filter(serverna.match, vhost))[-1]
    
    # get line number of returned line
    check = [i for i, x in enumerate(vhost) if x == found][-1]
    
    vbegin = check
    vend = check
    
    # match opening and closing vhost tag 
    vline = re.compile(r'</?VirtualHost.*?>')
    
    # determine beginning of desired vhost
    while vbegin <= check:
        grep = vline.search(vhost[vbegin])
        if grep != None:
            break
        vbegin -= 1
    
    # determine end of desired vhost
    while vend >= check:
        grep = vline.search(vhost[vend])
        if grep != None:
            break
        vend += 1
    
    prog = vbegin
    
    # add each line of desired vhost to a list
    foundHost = []
    while prog <= vend:
        foundHost.append(vhost[prog])
        prog += 1
    
    if mode == 'display':
        print("\n".join(foundHost))
    elif mode == 'array':
        return foundHost

def getAddr(hostIn, mode = 'display'):
    ipMatch  = re.compile(r'<VirtualHost [0-2]?[0-9]{1,2}(\.[0-2]?[0-9]{1,2}){3}:(80|443)>')
    ipAddr = list(filter(ipMatch.match, hostIn))[-1].split(' ')[-1].split(':')[0]
    if mode == 'display':
        print(frmStr % ('IP', ipAddr))
        print
    elif mode == 'return':
    	return ipAddr

def getUser(hostIn, mode = 'display'):
    usMatch  = re.compile(r'\s{4}PassengerUser.*')
    usrName = list(filter(usMatch.match, hostIn))[-1].split(' ')[-1]
    if mode == 'display':
        print(frmStr % ('User', usrName))
        print
    elif mode == 'return':
        return usrName

def getRoot(hostIn, mode = 'display'):
    drMatch  = re.compile(r'\s{2}DocumentRoot.*')
    docRoot = list(filter(drMatch.match, hostIn))[-1].split(' ')[-1]
    if mode == 'display':   
        print(frmStr % ('Doc Root', docRoot))
        print
    elif mode == 'return':
        return docRoot

def getDoms(hostIn, mode = 'display', domtype = 'all'):
    priMatch = re.compile(r'\s{2}ServerName.*')
    secMatch = re.compile(r'\s{2}ServerAlias.*')
    
    priDom = filter(priMatch.match, hostIn)[0].split(' ')[3:]
    secDom = []
    for alias in filter(secMatch.match, hostIn):
        secDom.extend(alias.split(' ')[3:])

    allDom = []
    allDom.extend(priDom)
    allDom.extend(secDom)
    
    if mode == 'display':
        pre = '    Aliases'
        if domtype == 'pri':
            print(frmStr % ('Main Domain', priDom[0]))
        elif domtype == 'sec':
            for srvAl in secDom:
                print(frmStr % (pre, srvAl))
                pre = ""
        elif domtype == 'all':
            print(frmStr % ('Main Domain', priDom[0]))
            for srvAl in secDom:
                print(frmStr % (pre, srvAl))
                pre = ""
        print
    elif mode == 'return':
        if domtype == 'pri':
            return priDom[0]
        elif domtype == 'sec':
            return secDom
        elif domtype == 'all':
            return allDom

def getFile(hostIn):
    certMatch = re.compile(r'\s{4}SSLCertificateFile.*')
    if len(filter(certMatch.match, hostIn)) > 0:
        certFile = list(filter(certMatch.match, hostIn))[-1].split(' ')[-1]
        print(frmStr % ('Certificate', certFile))
    else:
        sslWarn = True
        print("--SSL Not Enabled--")

    print

def getCert(hostIn, ports = ['File', '443', '465', '993', '995']):
    certMatch = re.compile(r'\s{4}SSLCertificateFile.*')
    if len(filter(certMatch.match, hostIn)) > 0:
        certFile = list(filter(certMatch.match, hostIn))[-1].split(' ')[-1]

        # uses previously defined ip function to return site's IP 
        # used in openssl "connect" statement
        ipAddy = getAddr(hostIn, 'return')
        sslFrm = "%-6s  %5s"

        # selects domain for openssl tests
        # if docroot is used, grabs domain from cert file path 
        # specified domain used if domain used 
        if os.path.isdir(search):
            snDom = getDoms(virtualHost, 'return', 'pri')
        else:
            snDom = search

        # compiles list of SSL expiration dates on all applicable ports 
        # "Valid" if domain specified is included in "DNS" names from openssl
	sslExp = list()
	for port in ports: 
            
            # grabs entirety of openssl x509 output for each port
            if port == 'File':
		portStr = port
                xRun = 'sudo cat ' + certFile + ' | openssl x509 -text | sed "s:^[ \\t]*::"'
            else:
		portStr = str(port) + ' ' 
                xRun = 'openssl s_client -showcerts -servername ' + snDom + ' -connect ' + ipAddy + ':' + portStr + ' < /dev/null 2>&1 | openssl x509 -text | sed "s:^[ \\t]*::"'

            xArray = subprocess.Popen(xRun, stdout=subprocess.PIPE, shell=True).communicate()[0].split('\n')

            comRegex = re.compile(r'Subject:?\sCN\s?=\s?[a-z0-9\.\-]+')
            naRegex  = re.compile(r'Not After.*')
            dnsRegex = re.compile(r'DNS:.*')

            # retrieves "Not After" (expiration) from openssl x509 
            notAfter = ':'.join(list(filter(naRegex.match, xArray))[-1].split(':')[1:])
            dateArr  = notAfter.split(' ')

            # concatenate date from openssl while converting 3 letter date code to 2 digit int
            # certdate = YearMonthDayHourMinuteSecond (YYYYmmddHHMMSS) in GMT (openssl default)
            if dateArr[2] == '':
                certDate = dateArr[5] + str(addNulls(getMonth(dateArr[1]))) + str(addNulls(dateArr[3])) + dateArr[4].replace(":", "")
            else:
                certDate = dateArr[4] + str(addNulls(getMonth(dateArr[1]))) + str(dateArr[2]) + dateArr[4].replace(":", "")

            # retrieves current datetime from system in GMT
            # system used for portability, as pytz is not usually installed by default
            dateCom = 'TZ=GMT date "+%Y%m%d%H%M%S"'
            curDate = subprocess.Popen(dateCom, stdout=subprocess.PIPE, shell=True).communicate()[0]

            # creates list of all SANs from openssl x509 
	    # if no SANs found, CN is used
            if len(filter(dnsRegex.match, xArray)) == 0:
		dnsHostArr[0] = re.search(comRegex, filter(comRegex.match, xArray)[-1]).group(0).split("=")[-1]
	    else:
            	dnsHostArr = list(filter(dnsRegex.match, xArray))[-1].replace("DNS:", "").replace(",", "").split(' ')
		
            # Invalid is default state, changed to valid if domain name is listed on the cert
            #      --then--
            # if current datetime is past datetime from cert, status set to Expired
            isValid = 'Invalid'
            for val in dnsHostArr:
                if val == snDom:
                    isValid = '  Valid' 

            if curDate > certDate:
                isValid = 'Expired'
                        
	    sslExp.append(portStr + " : " + isValid + " -" + notAfter)
	for portCheck in sslExp:
	    print(sslFrm % ('', portCheck))
        print
    else:
        if not isset("sslWarn"):
	    print("--SSL Not Enabled--")
            print


parser = argparse.ArgumentParser(prefix_chars='-')
parser.add_argument("-a", help="retrieve ip address of site / all sites associated with docroot", action="store_true")
parser.add_argument("-c", help="retrieve the location of the SSL cert file used by apache", action="store_true")
parser.add_argument("-d", help="retrieve list of domains for given docroot", action="store_true")
parser.add_argument("-r", help="retrieve the docroot for a given domain", action="store_true")
parser.add_argument("-s", help="retrieve SSL information for a given domain / docroot", action="store_true")
parser.add_argument("-P", help="used with -s to specify service / port to run checks. supports comma separated input. options: file,http,smtp,imap,pop3", dest="port")
parser.add_argument("-u", help="retrieve the user which owns the site / docroot", action="store_true")

args, unknown = parser.parse_known_args()

errors = ["Error:"]
if not unknown:
    errors.append("     -- vinfo requires either a docroot or domain to be specified --\n")

if args.port and not args.s:
    errors.append("     -P cannot be used without -s\n")

if args.port:
    portStr = args.port.replace("file", "File").replace("http", "443").replace("smtp", "465").replace("imap", "993").replace("pop3", "995")
    srvcArr = portStr.split(",")
    allowedPorts = ['File', '443', '465', '993', '995']
    die = []
    for srvc in srvcArr:
        if srvc not in allowedPorts:
            die.append(srvc)

    if (len(die) == 1):
        errors.append("     '" + die[0] + "' is not a valid port or service\n")
    elif (len(die) >= 1):
        errors.append("     '" + ', '.join(die) + "' are not valid ports or services\n")


if (len(errors) > 1):
    sys.exit("\n".join(errors))

search = unknown[-1]
virtualHost = getHost(search)

if args.a:
    getAddr(virtualHost)

if args.u:
    getUser(virtualHost)

if args.r:
    getRoot(virtualHost)

if args.d:
    getDoms(virtualHost)

if args.c:
    getFile(virtualHost)

if args.s:
    if not args.port:
        getCert(virtualHost)
    else:
        getCert(virtualHost, srvcArr)

default = True
for check in args.__dict__:
    if args.__dict__[check]:
        default = False

if default:
    getAddr(virtualHost)
    getUser(virtualHost)
    getRoot(virtualHost)
    getDoms(virtualHost)
    getFile(virtualHost)
    getCert(virtualHost)
